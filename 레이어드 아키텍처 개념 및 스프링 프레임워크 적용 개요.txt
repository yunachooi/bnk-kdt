Layered Architecture
-레이어드 아키텍쳐
-애플리케이션의 컴포넌트를 유사 관심사를 기준으로 레이어로 묶어 수평적으로 구성한 구조.

Presentation Layer
- 애플리케이션 최상단 계층, 클라이언트의 요청을 해석하고 응답하는 역할
- UI나 API를 제공
- 프레젠테이션 계층은 별도의 비즈니스 로직을 포함하고 있지 않으므로 비즈니스 계층으로 요청을 위임하고 받은 결과를 응답하는 역할을 수행

Business Layer
- 애플리케이션이 제공하는 기능을 정의하고, 세부 작업을 수행하는 도메인 객체를 통해 업무를 위임하는 역할

Data Access Layer
-데이터베이스에 접근하는 일련의 작업을 수행
-------------------------------------------------
레이어드 아키텍처 기반 설계는 다음과 같은 특징을 갖는다.
* 각 레이어는 가장 가까운 하위 레이어의 의존성을 주입받는다.
* 각 레이어는 관심사에 따라 묶여있으며, 다른 레이어의 역할을 침범하지 않는다.
 - 각 컴포넌트의 역할이 명확하므로 코드의 가독성과 기능 구현에 유리하다.
 - 코드의 확장성도 좋아진다.
* 각 레이어가 독립적으로 작성되면 다른 레이어와의 의존성을 낮춰 단위 테스트에 용의하다.
-------------------------------------------------
스프링 레이어드 아키텍처
Spring MVC는 Model-View-Controller의 구조로 View와 Controller는 프레젠테이션 계층이며,
Model은 비즈니스와 데이터접근 계층의 영역으로 구분할 수 있다.
비즈니스 계층에 서비스를 배치하여 엔티티와 같은 도메인 객체의 비즈니스 조직을 조합하도록 하고 
데이터 접근 계층에는 DAO(Spring Data JPA에서는 Repository)를 배치해 도메인을 관리한다.

프레젠테이션 계층
- 클라이언트와의 접점이 된다.
- 클라이언트로부터 데이터와 함께 요청을 받고 처리 결가를 응답으로 전달하는 역할을 수행
- 유저 인터페이스 (UI: User Interface)계층이라고도 함

비즈니스 계층
- 서비스(Service)계층이라고 함
- 핵심 비즈니스 로직을 구현하는 영역임
- 트랜잭션 처리나 유효성 검사 등의 작업 수행

데이터 접근 계층
- 영속(Persistence)계층이라고도 함
- 데이터베이스에 접근해야 하는 작업을 수행
